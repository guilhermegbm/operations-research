#Workflow name
name: CI/CD Pipeline
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the master branch
  push:
    branches:
      - master
jobs:
  #Test's job
  run-tests:
    name: Run Unit and Integration tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run Unit Tests
      - name: Run Unit Tests
        run: mvn -B -Dtest=*Test test
      #Run Integration Tests
      - name: Run Integration Tests
        #Will run any test inside the "integration" package or in any subpackage and whose name finishes with "*Integration"
        run: mvn -Dtest=integration.**.*Integration test

  build:
    name: Build
    needs: run-tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the project. Note that we use the option -DskipTests to skip the tests because the unit and integration tests have already been run before
      - name: Build project
        run: mvn -B install -DskipTests --no-transfer-progress --file pom.xml

  coverage:
    name: Coverage
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          
      - name: Compute Code Coverage
        run: mvn -B verify -P coverage --no-transfer-progress

      - uses: codecov/codecov-action@v1
        with:
          file: ./**/target/site/jacoco/jacoco.xml
          name: codecov